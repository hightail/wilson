/**
 * ConnectionFilterUtil
 *
 * @author justin.fiedler
 * @since 0.0.1
 *
 * @copyright (c) 2013 Hightail Inc. All Rights Reserved
 */

var _     = require('lodash'),
   //UserAgentUtil = require('./UserAgentUtil'),
   //UrlUtil = require('../util/UrlUtil'),
   //uaParser      = require('ua-parser'),
   //RequestParser = require('./RequestParser'),
   //uuid           = require('node-uuid'),
   LZString = require('lz-string');


module.exports = function(wilsonConfig) {
  var getFilterPriority = function (filterName) {
    var priority = 0;

    if (_.isNumber(wilsonConfig.server.tags[filterName])) {
      priority = wilsonConfig.server.tags[filterName];
    }

    return priority;
  };

  var getConnectionFilterArray = function (tags) {
    var filters = [];

    _.each(tags, function (filterValue, filterName) {
      filters.push({
        name: filterName,
        value: filterValue,
        priority: getFilterPriority(filterName)
      });
    });

    return filters;
  };

  /**
   * Given array of filter objects returns a human readable string with all filter names/values
   *
   * @param filters
   * @returns {string}
   */
  var getFilterString = function (filters) {
    var filterArray = [];
    _(filters).sortBy('name').each(function (filter) {
      filterArray.push(_.str.sprintf('%s=%s', filter.name, filter.value));
    });

    return filterArray.join('|');
  };

  /**
   * Given a @filterString generated by getFilterString() returns
   * a filter object array
   *
   * @param filterList
   * @returns {Array}
   */
  var getFiltersFromString = function (filterString) {
    var filters = [];
    var subFilterStrings = filterString.split('|');
    _.each(subFilterStrings, function (filterStr) {
      var tmpFilterObj = filterStr.split('=');
      var filterName = tmpFilterObj[0];
      var filterValue = tmpFilterObj[1];

      filters.push({
        name: filterName,
        priority: getFilterPriority(filterName),
        value: filterValue
      });
    });

    _(filters).sortBy(function (filter) {
      return filter.priority;
    });

    return filters;
  };

  /**
   * Given array of filter objects returns a human readable string with all filter names/values
   *
   * @param filters
   * @returns {string}
   */
  var getFilterHash = function (filters) {
    var filterString = getFilterString(filters);
    var hash = filterString;
    //hash = LZString.compress(filterString);
    hash = encodeURIComponent(LZString.compressToBase64(hash));

    return hash;
  };

  var getFiltersFromHash = function (filterHash) {
    var filterString;
    filterString = LZString.decompressFromBase64(decodeURIComponent(filterHash));
    //filterString = LZString.decompress(filterString);
    return getFiltersFromString(filterString);
  };


  var getFiltersObj = function (filters) {
    var filtersObj = { };

    _.each(filters, function (filter) {
      filtersObj[filter.name] = filter.value;
    });

    return filtersObj;
  };

  var getTagsFromHash = function (filterHash) {
    return getFiltersObj(getFiltersFromHash(filterHash));
  };

//  var decorateRequestClientInfo = function (req, res, next, companyConfig) {
//    var filters = [];
//    var connectionFilterString = req.params.connectionFilters;
//    var userAgent = req.headers['user-agent'];
//    var debugInternal = req.headers.dbg_internal;   // Debug flag to do some wonderful things!
//
//    if (connectionFilterString) {
//      filters = getFiltersFromHash(connectionFilterString);
//    } else {
//      filters = getConnectionFilterArray(
//        UserAgentUtil.getDevice(userAgent),
//        UserAgentUtil.getPlatform(userAgent),
//        null,
//        (companyConfig.company.name || 'hightail'),
//        req.locale,
//        RequestParser.getGEOLocale(req),
//        ('pref-' + req.htConfig.i18n.defaultLng)
//      );
//    }
//
//    logger.debug('Connection Filters: ', filters);
//
//    req.htConnectionFilters = filters;
//
//    //set the connection filters on the config
//    req.htConfig.app.connectionFilters = getFilterHash(filters);
//
//    // Set the Client and Context Data
//    var clientInfo = getFiltersObj(filters);
//
//    //Determine storageDomain, default is FQDN
//    var storageDomain = req.host;
//
//    //HT app uses basedomain (.hightail.com)
//    if (req.htConfig.appOptions.cookieDomain === "BASE") {
//      storageDomain = UrlUtil.basedomain(req.host);
//    }
//
//    var extendedInfo = {
//      deviceInfo: {
//        osName: '',
//        osVersion: '',
//        osClass: UserAgentUtil.getOsClass(userAgent),
//        carrier: '',
//        mfg: '',
//        model: clientInfo.device,
//        category: clientInfo.platform || 'desktop',
//        locale: clientInfo.language.replace('-', '_')
//      },
//      browserInfo: uaParser.parseUA(userAgent),
//      companyInfo: {
//        name: companyConfig.company.name,
//        licenseKey: companyConfig.appLicenseKey,
//        version: req.htConfig.app.version,
//        defaultLabel: companyConfig.company.defaultLabel,
//        webDomain: companyConfig.webDomain,
//        externalWebDomain: companyConfig.externalWebDomain
//      },
//      geoInfo: {
//        locale: clientInfo.language.replace(/-.*/, '') + '_' + clientInfo.locale
//      },
//      uuid: uuid.v4().replace(/-/g, ''),
//      storageDomain: storageDomain,
//      debugInfo: {
//        debugInternal: debugInternal
//      }
//    };
//
//    // Remove some duplicate properties
//    delete clientInfo.brand;
//    delete clientInfo.device;
//    delete clientInfo.platform;
//
//    req.htConfig.client = _.extend(clientInfo, extendedInfo);
//
//    next();
//  };

  return {
    getConnectionFilterArray: getConnectionFilterArray,
    getFilterString: getFilterString,
    getFiltersFromString: getFiltersFromString,
    getFilterHash: getFilterHash,
    getFiltersFromHash: getFiltersFromHash,
    getTagsFromHash: getTagsFromHash
  };
}

